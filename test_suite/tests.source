#!/bin/bash

# Copyright 2015 Google Inc. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Global counters
EXECUTED=0
FAILED=0

JSONNET_BIN="${JSONNET_BIN:-../jsonnet}"

# Display additional information such as successful tests (useful if they are slow).
VERBOSE="${VERBOSE:-false}"

separator() {
    echo -e "\n-----------------------------\n"
}

get_temp_dir() {
    if [ -z "$TMP_DIR" ]; then
        # We use Python to avoid portability problems with `mktemp`.
        # See: https://unix.stackexchange.com/questions/30091/fix-or-alternative-for-mktemp-in-os-x
        TMP_DIR="`python2 -c "import tempfile; print(tempfile.mkdtemp(prefix='jsonnet_'))"`"
        $($VERBOSE) && echo "Created temporary directory $TMP_DIR"
    fi
}

remove_temp_dir() {
    if [ -n "$TMP_DIR" ]; then
        $($VERBOSE) && echo "Removing temporary directory $TMP_DIR"
        rm -rf "$TMP_DIR"
        TMP_DIR=""
    fi
}

init() {
    get_temp_dir
}

deinit() {
    remove_temp_dir
}

test_eval() {
    JSONNET_CMD="$1"
    JSONNET_FILE="$2"
    EXPECTED_EXIT_CODE="$3"
    GOLDEN_OUTPUT="$4"
    GOLDEN_KIND="$5"
    if [ -n "$DISABLE_ERROR_TESTS" ] && [ "$EXPECTED_EXIT_CODE" != 0 ]; then
        return 0
    fi

    TEST_OUTPUT="$($JSONNET_CMD "$JSONNET_FILE" 2>&1)"
    TEST_EXIT_CODE="$?"
    EXECUTED=$((EXECUTED + 1))

    if [ "$TEST_EXIT_CODE" -ne "$EXPECTED_EXIT_CODE" ] ; then
        FAILED=$((FAILED + 1))
        if [ -z "$SUMMARY_ONLY" ]; then
            echo -e "\e[31;1mFAIL\e[0m \e[1m(exit code)\e[0m: \e[36m$JSONNET_FILE\e[0m"
            echo "This run's output:"
            echo "$TEST_OUTPUT"
            echo "Actual exit code $TEST_EXIT_CODE, expected $EXPECTED_EXIT_CODE"
            separator
        fi
        return 1
    fi

    case "$GOLDEN_KIND" in
        "REGEX")
        if [[ ! "$TEST_OUTPUT" =~ $GOLDEN_OUTPUT ]] ; then
            FAILED=$((FAILED + 1))
            if [ -z "$SUMMARY_ONLY" ]; then
                echo -e "\e[31;1mFAIL\e[0m \e[1m(regex mismatch)\e[0m: \e[36m$JSONNET_FILE\e[0m"
                echo "This run's output:"
                echo "$TEST_OUTPUT"
                separator
            fi
            return 1
        fi
        ;;

        "PLAIN")
        if [ "$TEST_OUTPUT" != "$GOLDEN_OUTPUT" ] ; then
            FAILED=$((FAILED + 1))
            if [ -z "$SUMMARY_ONLY" ]; then
                echo -e "\e[31;1mFAIL\e[0m \e[1m(output mismatch)\e[0m: \e[36m$JSONNET_FILE\e[0m"
                echo "This run's output:"
                echo "$TEST_OUTPUT"
                echo "Expected:"
                echo "$GOLDEN_OUTPUT"
                echo "Diff:"
                TEST_OUTPUT_FILE="$TMP_DIR/jsonnet_output"
                TEST_GOLDEN_FILE="$TMP_DIR/jsonnet_golden"
                echo "$TEST_OUTPUT" > "$TEST_OUTPUT_FILE"
                echo "$GOLDEN_OUTPUT" > "$TEST_GOLDEN_FILE"
                # Using git diff for pretty format and pretty colors
                git --no-pager diff "$TEST_GOLDEN_FILE" "$TEST_OUTPUT_FILE"
                # The output is often quite long, let's repeat the filename once more
                # to avoid wasting time on looking for it
                echo -e "\nTEST FILE ABOVE: \e[36m$JSONNET_FILE\033[0m"
                separator
                return 1
            fi
        fi
        ;;

        *)
        echo "Unrecognized GOLDEN_KIND: $GOLDEN_KIND" >&2
        exit 1
        ;;
    esac

    $($VERBOSE) && echo -e "\e[32mSUCCESS\e[0m: \e[36m$JSONNET_FILE\e[0m"
}
